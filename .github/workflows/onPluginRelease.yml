name: On Plugin Release

on:
  repository_dispatch:
    types: onPluginRelease

jobs:
  build:
    concurrency: ${{ github.repository }}
    name: Add Release To Repo
    runs-on: ubuntu-latest
    steps:
      - name: validate
        run: |
          set -uexo pipefail
          test '${{ github.event.client_payload.version }}' == '${{ github.event.client_payload.released.releases[0].version }}'
      - name: create release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allowUpdates: true
          removeArtifacts: true
          tag: ${{ github.event.client_payload.version }}
          name: Release ${{ github.event.client_payload.version }}
          draft: false
          prerelease: false
      - name: download release asset
        env:
          #remove v from tag: i.e 0.9.74
          version: ${{ github.event.client_payload.version }}
          #armory/kubesvc-plugin
          dockerrepository: ${{ github.event.client_payload.dockerrepository }}
          #/opt/plugin/kubesvc-$version.zip
          asset_path: ${{ github.event.client_payload.dockerArtifactPath }}/${{ github.event.client_payload.artifactName }}
        run: |
          set -uexo pipefail
          : ${version:?Missing version}
          docker pull $dockerrepository:$version
          id=$(docker run --rm -d $dockerrepository:$version sh -c 'exec tail -f /dev/null')
          : ${id:?Missing container id}
          docker cp "$id:$asset_path" .
          docker kill "$id"
      - name: upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ github.event.client_payload.artifactName }}
          asset_name: agent-k8s-spinplug-${{ github.event.client_payload.version }}.zip
          asset_content_type: application/zip
      - name: remove release asset
        run: |
          rm ${{ github.event.client_payload.artifactName }}
      - name: checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: add release to plugin repo
        run: |
          echo "Go run addPluginReleaseToRepo: $(go run .github/workflows/addPluginReleaseToRepo.go '${{ toJson(github.event.client_payload) }}')"
      - name: commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "Add plugin release ${{ github.event.client_payload.released.id }} ${{ github.event.client_payload.released.releases[0].version }}" -a
      - name: push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
